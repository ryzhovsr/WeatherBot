import requests     # –î–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ —Å–∞–π—Ç—É
import telebot      # –î–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∏ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º
import datetime     # –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
import os           # –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É—Ç–∏ –∫ –∂—É—Ä–Ω–∞–ª—É –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
from telebot import types   # –î–ª—è –∫–ª–∞–≤–∏—à –≤ –º–µ–Ω—é –±–æ—Ç–∞
from geopy.geocoders import Nominatim
# –°–≤–æ–π –º–æ–¥—É–ª—å —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –¥–ª—è —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ñ–∞–π–ª–∞
from configReader import get_bot_token, get_api_token, get_admin_id, get_key


# Constants
BOT_TOKEN = get_bot_token()
API_TOKEN = get_api_token()
BOT = telebot.TeleBot(BOT_TOKEN)
MONTHS = {1: "–Ø–Ω–≤–∞—Ä—è", 2: "–§–µ–≤—Ä–∞–ª—è", 3: "–ú–∞—Ä—Ç–∞", 4: "–ê–ø—Ä–µ–ª—è", 5: "–ú–∞—è", 6: "–ò—é–Ω—è", 7: "–ò—é–ª—è", 8: "–ê–≤–≥—É—Å—Ç–∞",
          9: "–°–µ–Ω—Ç—è–±—Ä—è", 10: "–û–∫—Ç—è–±—Ä—è", 11: "–ù–æ—è–±—Ä—è", 12: "–î–µ–∫–∞–±—Ä—è"}

# –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –∂—É—Ä–Ω–∞–ª—É –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –û–°
if os.name == 'nt':
    journalDir = os.path.join(os.getcwd(), 'UsersActions\\')
else:
    journalDir = os.path.join(os.getcwd(), 'UsersActions/')


# –î–µ–ª–∞–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –∑–∞–ø—Ä–æ—Å—ã –∫ —Å–∞–π—Ç—É –ø–æ–≥–æ–¥—ã —Å –∑–∞–¥–∞–Ω–Ω—ã–º –≥–æ—Ä–æ–¥–æ–º (–µ—Å–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ - –≤–µ—Ä–Ω—ë—Ç True)
def city_check(selected_city):
    query = requests.get('http://api.openweathermap.org/data/2.5/forecast',
                         params={'q': selected_city, 'units': 'metric', 'lang': 'ru', 'APPID': API_TOKEN})
    return query.reason != 'Not Found'


# –£–¥–∞–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —á–∞—Ç–∞
def remove_message(chat_id, message_id):
    BOT.delete_message(chat_id=chat_id, message_id=message_id)


# –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç
def current_forecast(selected_city):
    data = requests.get('http://api.openweathermap.org/data/2.5/find',
                        params={'q': selected_city, 'units': 'metric',
                                'lang': 'ru', 'APPID': API_TOKEN}).json()['list'][0]

    output_text = str(round(data['main']['temp'])) + '¬∞ '
    weather = str(data['weather'][0]['description']).capitalize()
    output_text += add_emoji_weather(weather)
    pressure = round(data['main']['pressure'] * 750.06 / 1000)  # –ü–µ—Ä–µ–≤–æ–¥–∏ –∏–∑ –º–ë–∞—Ä –≤ –º–º. —Ä—Ç. —Å—Ç.
    output_text += '–î–∞–≤–ª–µ–Ω–∏–µ ' + str(pressure) + ' –º–º '
    output_text += '–í–ª–∞–∂–Ω–æ—Å—Ç—å ' + str(data['main']['humidity']) + ' %\n'
    output_text += '–í–µ—Ç–µ—Ä ' + str(round(data['wind']['speed'])) + ' –º/—Å \n\n'
    return output_text


# –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ–≥–æ–¥—É –Ω–∞ 4 –¥–Ω—è
def forecast_for_four_days(selected_city):
    data = requests.get("http://api.openweathermap.org/data/2.5/forecast",
                        params={'q': selected_city, 'units': 'metric', 'lang': 'ru', 'APPID': API_TOKEN}).json()

    right_days = {}
    counter = 0

    now = datetime.datetime.now()

    # –¶–∏–ª –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è —É—Ç—Ä–∞/–æ–±–µ–¥–∞/–≤–µ—á–µ—Ä–∞ –ø–µ—Ä–≤—ã—Ö —á–µ—Ç—ã—Ä—ë—Ö –¥–Ω–µ–π
    for inf in data['list']:
        if str(now.day) == inf['dt_txt'][8:10]:
            continue
        if inf['dt_txt'][11:] == '09:00:00' or inf['dt_txt'][11:] == '12:00:00' or inf['dt_txt'][11:] == '18:00:00':
            right_days[counter] = inf
            counter += 1
        if counter == 12:
            break

    counter = 3     # –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å —É—Ç—Ä–∞
    output_text = ""

    for key in right_days:
        if counter == 3:    # –î–ª—è –æ—Ç–º–µ—Ç–∫–∏ –Ω–æ–≤–æ–≥–æ –¥–Ω—è
            output_text += right_days[key]['dt_txt'][8:10] + " " + MONTHS[int(right_days[key]['dt_txt'][5:7])] + '\n'
            counter = 0

        if key == 0 or key == 3 or key == 6 or key == 9:
            output_text += "–£—Ç—Ä–æ–º      "
        elif key == 1 or key == 4 or key == 7 or key == 10:
            output_text += "–î–Ω—ë–º        "
        elif key == 2 or key == 5 or key == 8 or key == 11:
            output_text += "–í–µ—á–µ—Ä–æ–º  "

        output_text += str(round(right_days[key]['main']['temp'])) + "¬∞ "
        weather = right_days[key]['weather'][0]['description'].capitalize()
        output_text += add_emoji_weather(weather)

        counter += 1

        if key == 2 or key == 5 or key == 8 or key == 11:
            output_text += "\n"

    return output_text


# –°–æ–∑–¥–∞—ë—Ç –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
def create_markup():
    item1 = types.KeyboardButton('–¢–µ–∫—É—â–∏–π –ø—Ä–æ–≥–Ω–æ–∑')
    item2 = types.KeyboardButton('–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 4 –¥–Ω—è')
    item3 = types.KeyboardButton('–í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥')

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(item1, item2, row_width=2)
    markup.add(item3)
    return markup


# –î–æ–±–∞–≤–ª—è–µ—Ç –∫ –ø–æ–≥–æ–¥–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å–º–∞–π–ª–∏–∫
def add_emoji_weather(weather):
    match weather:
        case '–Ø—Å–Ω–æ': return '‚òÄ ' + weather + '\n'
        case '–ü–∞—Å–º—É—Ä–Ω–æ': return '‚òÅ ' + weather + '\n'
        case '–î–æ–∂–¥—å': return 'üåß ' + weather + '\n'
        case '–û–±–ª–∞—á–Ω–æ —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏': return 'üå¶ ' + '–û–±–ª. —Å –ø—Ä–æ—è—Å–Ω–µ–Ω–∏—è–º–∏' + '\n'
        case '–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å': return 'üå• ' + '–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–±–ª.' + '\n'
        case '–ù–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å': return 'üåß ' + weather + '\n'
        case '–ù–µ–±–æ–ª—å—à–∞—è –æ–±–ª–∞—á–Ω–æ—Å—Ç—å': return 'üå§ ' + '–ù–µ–±–æ–ª—å—à–∞—è –æ–±–ª.' + '\n'
        case '–ù–µ–±–æ–ª—å—à–æ–π —Å–Ω–µ–≥': return 'üå® ' + weather + '\n'
        case '–°–Ω–µ–≥': return 'üå® ' + weather + '\n'
        case _: return weather + '\n'   # Default


# –ó–∞–ø–∏—Å—ã–≤–∞–µ—Ç –≤ –∂—É—Ä–Ω–∞–ª –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def write_user_action(name, username, id_user, text=""):
    time_now = str(datetime.datetime.now())[:-7]

    if username is None:
        username = ''
    import codecs

    with codecs.open(journalDir + 'journal.txt', 'a', encoding='utf-8') as f:   # a - –∫–ª—é—á –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Ñ–∞–π–ª
        f.write(time_now + ' | ' + username + ' ' + name + " (ID " + str(id_user) + ") | " + text + "\n")


def check_key(message):
    if message.from_user.id == get_admin_id() and message.json['text'] == get_key():
        file = open(journalDir + 'journal.txt', 'rb')
        BOT.send_document(message.from_user.id, file)
        file.close()
        return True
    return False


# –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –≥–æ—Ä–æ–¥ –ø–æ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏
def city_definition(message):
    latitude = str(message.location.latitude)
    longitude = str(message.location.longitude)
    geolocator = Nominatim(user_agent="my_request")

    if 'village' in geolocator.reverse(latitude + ', ' + longitude).raw['address'].keys():
        return geolocator.reverse(latitude + ', ' + longitude).raw['address']['village']
    elif 'town' in geolocator.reverse(latitude + ', ' + longitude).raw['address'].keys():
        return geolocator.reverse(latitude + ', ' + longitude).raw['address']['town']
    else:   # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≥–æ—Ä–æ–¥, –≤–æ–∑–≤—Ä–∞—Ç–∏–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
        return ''
